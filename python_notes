Python coding

The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

python --> means 2.7.3
python3 --> means 3.10.1

***

print("Hello")
# will show "Hello" in the terminal window

message = "Hello"
print(message)

# will give the same result, but this time we used a variable

print --> is a function
message --> is a variable
"Hello" --> is the value of the variable
# text that is not code is shown in orange

variables
# variables can contain letters, numbers, and underscores. They cannot start with a number
# variable names cannot contain spaces, instad we can use underscore
# don't use python programming words to describe variables
# variable names should be consise, but understandable
# be careful to use letter l and O because they can be confused with 1 and 0
 
 # strings
 # a string is a series of characters which can have single or double quotes, ie. "this is the text", or 'this is the text'
 
 upper --> capital letters
 lower --> small letters
 title --> First letter in first and second name is in capital letters
 
name = "ada lovelace"
print(name.title())
# this will print Ada Lovelace

name = "ada lovelace"
print(name.upper())
# this will print ADA LOVELACE

# combining strings is called concatenation

# adding whitespace & tabs to strings
\t - tab
\n - return, add whitespace between the lines

# remove whitespace
rstrip() --> stripping whitespace on the right side of the string
lstrip() --> stripping whitespace on the left side of the string
strip() --> stripping whitespace on both sides of the string

# printing a .py file directly in terminal instead from geany
- go to the right folder cd xx/xx
- python nameoffile.py

# print
- first write all variables, then print
name = "emma goldman"
print(name)

#numbers

3**2 --> means 3 elevated to 2
examples:
3**3=27 (3*3*3)
6**4+1296 (6*6*6*6)
# for every calculation Python return a result
# numbers with a decimal point is called a float

#str() function

age = 23
message = "Happy birthday + str(age) + "rd birthday!"
print(message)
# if we use the variable without str(), Pyhton don't understand how to interpret it
# for calculations in Geany, we use:
print(8+3) to show result in terminal window

# comments
# if we want to commnt out project in Python we can use #, Python will ignore what follows after this

# say hello to everyone.
print("Hello Pyhton People")
- Pyhton will only interpret and print the second line.

# lists
[] --> indicates a list
# elements in the list are separated by comma
['shoes', jacket' , 'gloves']
# if we want to refer to a specific element in the list we write:
colors = ['red' , 'green' , 'white' , 'black']
print(colors[0])
# the first element on the list is numbered 0 (index)
# we can add upper, lower or title to format the element
colors = ['red' , 'green' , 'white' , 'black']
print(colors[0].title())

bicycles = ['trek' , 'cannondale' , 'redline' , 'specialized']
print(bicycles[-1])
# -1 shows the last element on the list
# -2 shows the second last item om the list
# -3 returns the third item from the end and so forth.

# changing, adding and removing elements from the list
example:

motorcycles = ['honda','yamaha','suzuki']
print(motorcycles)

motorcycles[0] = 'ducati'
print(motorcycles)

# with motorcycles[0] = 'ducati' we change the value of the fist item on the list, from honda to ducati.

# append means to add an item, insert mean to at at the specified places in the list. Appending is useful if we don't have the complete list from the beginning and want to add continuously. Insert us useful if we already have a list but need to add something and it needs to be in a specific order.

# removing elements from the list
- can be done according to position or value
- del statement is removal
- example: 
del motorcycles[0] --> indicates which position is the list should be removed

# pop() method
- With the pop method you can choose any position in the list to print. 
first_owned = motorcycles.pop(0)
print(motorcycles.title())
- we can use both pop() and [x] to point to a position in a list, but pop will remove the item while [x] will not
- we can use both del and pop() to remove an iten from a list. If we want to continue to work with the removed ite, we need to use pop() method

# Removing item by value
- remove() method can be used when we want to remove an item without knowing it's position.
list.remove('whateveritemwewanttoremovefromthelist') 
- to be able to understand why we are using remove() we can name the variable and we can point to the variable to print statments about it.
- remove() only removes the first value and if we want it to remove a value every time it occurs, we need a loop

# printing a message to people on a list
guests = ['Kerstin' , 'Elsa' , 'Erika' , 'mother' , 'Louise' , 'Marie' , 'Birgitta' , 'Sandra']
print("Hello " + guests[2] + message + "\n")

- when we use pop() to remove values from alist and want to remove several, the number we want to remove will always be 0

# Sorting a list aphabetically with the sort() method
- It's permanent
- we can also do it in reverse order by writing reverse=True
list.sort() --> for alphabetical order
list.sort(reverse=True)

# sorted() method
- will organize the list in an alphabetical way but not permanently. It can also be used with reverse=True
print(sorted(list, reverse=True))

# reverse() method
- this method will print the list in the reverse order. It's permanent, but can be changes back using the reverse() again.

# len() to find the length of a list
- len(list) --> in interpreter
- print(len(list)) --> in ie. geany

# looping
- can be used if we want to use the same action for every item in a list
- for list in list:  --> to print each item on a new line/row. This way we can collectivize action for a list, instead of doing an individual action for each item on the list
- We can choose any name for the variable, ie. for guest in guests, or for cat in cats
- to use singular and plural in the way shown will help us to know if we are work with one item or a list
- we can include as many lines as we want
- A print that is outside of the indent concludes the loop. It will be printed only once.
- indentation is used to show that one line is connected to another
- indentation also helps with organization of blocks of code
- we have to be careful to use it correctly as:
# indent error stops the entire program. Syntax error runs until the point where there is a problem/error
- the : tells python to include what follows in the loop

# To know the index number of an item
- If we don't know the position of an item in a list and want to point to this item, we can:
- print(listname.index('nameofitem')) --> to know the index number of a specific item
- list[list.index('nameofitem')] --> if we want to print the name directly in the message

# range() function
- the range(1,5) will only show the numbers 1-4 and not 5. 
- for value in range(1,5):

# for the loop it's difficult to understand how to write variable within that will function according to expectations.
Example:

for value in range(1,51):
	print(value, "fuck you, I won't do what you tell me")
	names = ['anna', 'sven', 'danny', 'marie', 'olga']
	for name in names:
		print(name.title())
# for each line a new number will be printed. The message "fuck you..." will be printed next to each number. Because it's a loop and we told python to print the text repeatedly after print the value which is within range 1-51	

#Squares
squares = []
# this defines an empty list calles squares
for value in range(1,11):
#we are looping and using values from 1-10
	square = value**2
	# we are setting a variable inside the loop **2 (square)
	squares.append(square)
	# every new value is added to the list	
print(squares)
# printing complete list outside of the loop

- squares.append(value**2)
# we can write squares.append(value**2) directly to be more concise
# we should focus on writing code that is understandable first and not efficient

#list comprehension
squares = [value**2 for value in range(1,11)]
print(squares)
# as above but concise
threes = [value*3 for value in range(1,31)]
for three in threes:
	print(three)
	
# when it is written 'multiplies' --> it means all number divided by three (3,x,3)
# if it is written multiplied by --> value*3

digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
min(digits)
#prints the smallest value
max(digits)
# prints the biggest value
sum(digits)
# prints the totals sum of values in the list
numbers = list(range(1, 500))
# defining range of values

# press q if we want to stop an operation in the terminal

players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[:4])
# printing the first four
# It is included as in last exercise, the last number is not printed
# when first index isn't specified it starts from the beginning of the list

players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[2:])
# when the index at the end is not specified - 
# it will be printed until the end of the list  

players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[-3])
# print the third player from the end

players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[-3:])
# print the last three players

players = ['charles', 'martina', 'michael', 'florence', 'eli']
print("Here are the first three players on my team:")
for player in players[:3]:
	print(player.title())
	# print the three first players each on a new line
	# specifying which numbers is don't direcly in for line 
	

my_foods = ['pizza', 'falafel', 'carrot cake']
friend_foods = my_foods[:]
# [:] refers to the whole my_foods list
# if we remove [:] the two lists will be printed exactly the same
# we want the two list to have a new and each a different item added

my_foods.append('cannoli')
friend_foods.append('ice cream')
# adding a new item on each list

print("My favorite foods are:")
print(my_foods)

print("\nMy friend's favorite foods are:")
print(friend_foods)
# the two prints show the same list because one = the other


items = ['hairbrush', 'tshirt', 'pants', 'socks', 'toothbrush', 'sweater', 'hoodie', 'glasses', 'shoes', 'computer', 'camera']
print("The first three items in the list are:")
for item in items[:3]:
	print(item.title())
print("\n\n")
# printing the first three items on the list

print("Three items from the middle of the list are:")
for item in items[4:7]:
	print(item.title())
print("\n\n")
# printing three items on index 4, 5 and 6

print("the last three items in the list are:")
for item in items[-3:]:
	print(item.title())
	# printing the last three items on the list
	

# tuple

# values that cannot change are called immutable
# an immutable list is called a tuple


dimensions = (200, 50)
print(dimensions[0])
#printing value in first position
print(dimensions[1])
# printing value in the second position

dimensions[0] = 250
print(dimensions[0])
# the value of index 0 cannot be change,
# when it is defined in the first variable
# if we want immutable values for the rectangle;
# it is good that python communicates and error

# PEP8 and styling code
https://www.python.org/dev/peps/pep-0008/
- code length should be no longer than 79 characters
- Some teams use a code length of 99 characters
- comment length should be no longer than 72 characters
- The code should aim to be neat and easy to read
- And also so it's possible to have three windows open at the same time
- Use blank lines to group parts of the program
- There may be code written with older python which doesn't support current style guide
# In Geany --> go to: edit - preferences - editor - indentation (chose replace tabs by spaces, tab width set to 4)
- ctrl I --> creates an indent
- ctrl U --> decreases an indent
- ctrl E --> makes text into a comment in the code

number = 42
number==42
True --> == testing an argument

# list with values printed differently
cars = ['audio', 'bmw', 'subaru', 'toyota']
for car in cars:
    if car == 'bmw':
        print(car.upper())
# if the car is a bmw it will be printed with upper case letters
    else:
        print(car.title())
# if it's any other car, it will be printed with first letter upper case
# if --> is a conditional test

car = 'bmw'
car == 'bmw'
# first car equals bmw
# second conditional test on if it's a bmw
# respons is True
car == 'audi'
# would return False

# Checking equality is case sensitive
car = 'Audi'
car == 'audi'
# will get the response: False

# managing case sensitivity when checking equality
car = 'Audi'
car.lower() == 'audi'
True
# we make sure all letters are lower case when testing
# if car is printed it will show 'Audi'still. It doesn't change the variable permanently
# can for example be used to check availability of usernames

requested_topping = 'mushrooms'
if requested_topping != 'anchovies':
    print("Hold the anchovies!")
# the requested topping is mushrooms
# if the requested topping is not anchovies, print 'Hold the anchovies!'
# != mean NOT

# mathematical comparison
age = 19
# defining that the age is 19
age < 21
# asking if the number is less than 21
age <= 21
# asking if the number is smaller or equals 21
age > 21
# asking if the number is higher than 21
age >= 21
# asking if the number is highers than or equals 21

# checking multiple conditions
age_o = 22
age_1 = 18
age_0 >= 21 and age_1 >= 21
# asking if age_0 is bigger than or equals 21, and
# if at the same time age_1 is bigger than or equals 21, which as false
age_1 = 22
# age_1 now equals 22
age_0 >= = 21 and age_1 >= 21
# with the change of age_1 variable, the conditions are not met for both

age_0 = 18
# changing variable to 18
age_0 >= 21 or age_1 >= 21
# asking if age_0 or age_1 is bigger than or equals 21
# the condition is met for age_1 which was changed to 22 
# when using or the conditions don't have to be met for both














































	
		
